@book{love2010linux,
  title={Linux kernel development},
  author={Love, Robert},
  year={2010},
  publisher={Pearson Education}
}

@misc{zenodo,
  title     = {A dataset of Linux Kernel commits},
  author    = {Maes Bermejo, M. and Gonzalez-Barahona, J. M. and Gallego, M. and Robles, G.},
  year      = {2024},
  note      = {doi: 10.5281/zenodo.10654193}
}

@article{ISRAELI,
	title = {The Linux kernel as a case study in software evolution},
	journal = {Journal of Systems and Software},
	volume = {83},
	number = {3},
	pages = {485-501},
	year = {2010},
	issn = {0164-1212},
	doi = {https://doi.org/10.1016/j.jss.2009.09.042},
	url = {https://www.sciencedirect.com/science/article/pii/S0164121209002519},
	author = {Ayelet Israeli and Dror G. Feitelson},
	keywords = {Software evolution, Lehman’s laws, Linux kernel},
	abstract = {We use 810 versions of the Linux kernel, released over a period of 14years, to characterize the system’s evolution, using Lehman’s laws of software evolution as a basis. We investigate different possible interpretations of these laws, as reflected by different metrics that can be used to quantify them. For example, system growth has traditionally been quantified using lines of code or number of functions, but functional growth of an operating system like Linux can also be quantified using the number of system calls. In addition we use the availability of the source code to track metrics, such as McCabe’s cyclomatic complexity, that have not been tracked across so many versions previously. We find that the data supports several of Lehman’s laws, mainly those concerned with growth and with the stability of the process. We also make some novel observations, e.g. that the average complexity of functions is decreasing with time, but this is mainly due to the addition of many small functions.}
}

@article{prade,
  title={Deep learning to find bugs},
  author={Pradel, Michael and Sen, Koushik},
  journal={TU Darmstadt, Department of Computer Science},
  volume={4},
  number={1},
  year={2017}
}

@misc{peru,
      title={ZeroIn: Characterizing the Data Distributions of Commits in Software Repositories}, 
      author={Kalyan Perumalla and Aradhana Soni and Rupam Dey and Steven Rich},
      year={2022},
      eprint={2204.07863},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2204.07863}, 
}

@article{jayara,
  title={Effective Performance Analysis And Visualization On Embedded Linux},
  author={Jayaraj, PB and Gopalakrishnan, Ranjith and Jain, Vikas and Campus, Philips Innovation},
  journal={Software Engineering Applications},
  pages={27--29},
  year={2006}
}

@INPROCEEDINGS{cityVR,
  author={Merino, Leonel and Ghafari, Mohammad and Anslow, Craig and Nierstrasz, Oscar},
  booktitle={2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={CityVR: Gameful Software Visualization}, 
  year={2017},
  volume={},
  number={},
  pages={633-637},
  keywords={Software;Visualization;Tools;Urban areas;Software engineering;Games;software visualization;3D visualization;virtual reality;I3D;Immersive 3D environments},
  doi={10.1109/ICSME.2017.70}
}

@inproceedings{visLin,
author = {Liu, Hanzhi and Jiang, Yanyan and Xu, Chang},
title = {Understanding the Linux Kernel, Visually},
year = {2025},
isbn = {9798400711961},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689031.3696095},
doi = {10.1145/3689031.3696095},
abstract = {Understanding the Linux kernel is challenging due to its large and complex program state. While existing kernel debugging tools provide full access to kernel states at arbitrary levels of detail, developers often spend a significant amount of time sifting through redundant information to find what is truly useful. Additionally, the textual results provided by traditional debuggers are often insufficient for expressing high-dimensional information in a readable manner.This paper presents Visualinux, the first debugging framework that can simplify the program state of the Linux kernel to a level that can be visually understood with low programming complexity and effort. Visualinux includes a domain-specific language for specifying simplifications of a kernel object graph, an SQL-like domain-specific language for customizing the simplified object graph, and a panel-based interactive debugger. Evaluation results show that Visualinux can visualize various complex kernel components and efficiently assist developers in diagnosing sophisticated kernel bugs.},
booktitle = {Proceedings of the Twentieth European Conference on Computer Systems},
pages = {1044–1060},
numpages = {17},
keywords = {Debugging, Linux Kernel, Software Visualization},
location = {Rotterdam, Netherlands},
series = {EuroSys '25}
}

@article{mithun,
  title={Linux Package Dependency Visualization},
  author={Mithun, Xavier Lobo Ernest and van de Wetering, HMM},
  journal={Master's Thesis at Department of Mathematics and Computer Science, Aug},
  pages={1--64},
  year={2009}
}



